using System;
using System.Text;
using BuildToolUtilities;

namespace BuildTool
{
	// Represents a folder within the master project (e.g. Visual Studio solution)
	class MakefileFolder : MasterProjectFolder
	{
		// Constructor
		public MakefileFolder(ProjectFileGenerator InitOwnerProjectFileGenerator, string InitFolderName)
			: base(InitOwnerProjectFileGenerator, InitFolderName)
		{
		}
	}

	class MakefileProjectFile : ProjectFile
	{
		public MakefileProjectFile(FileReference InitFilePath)
			: base(InitFilePath)
		{
		}
	}

	// Makefile project file generator implementation
	class MakefileGenerator : ProjectFileGenerator
	{
		// True if intellisense data should be generated (takes a while longer)
		// Now this is needed for project target generation.
		private readonly bool bGenerateIntelliSenseData = true;

		// Default constructor
		public MakefileGenerator(FileReference InOnlyGameProject)
			: base(InOnlyGameProject)
		{
		}

		// True if we should include IntelliSense data in the generated project files when possible
		override public bool GetbGenerateIntelliSenseData()
		{
			return bGenerateIntelliSenseData;
		}

		// File extension for project files we'll be generating (e.g. ".vcxproj")
		override public string ProjectFileExtension => ".mk";

		protected override bool WriteMasterProjectFile(ProjectFile BuildToolProject, PlatformProjectGeneratorCollection PlatformProjectGenerators)
		{
			return true;
		}

		private bool WriteMakefile()
		{
			string BuildToolRootPath = BuildTool.RootDirectory.FullName;
			string ProjectBuildCommand = "";
			string MakeGameProjectFile = "";

			if (!String.IsNullOrEmpty(GameProjectName))
			{
				string GameProjectFile = OnlyGameProject.FullName;
				MakeGameProjectFile = "GAMEPROJECTFILE =" + GameProjectFile + "\n";
				ProjectBuildCommand = "PROJECTBUILD = bash \"$(ROOTPATH)/Engine/Build/BatchFiles/Linux/RunMono.sh\" \"$(ROOTPATH)/Engine/Binaries/DotNET/BuildTool.exe\"\n";
			}

			string BuildCommand = "BUILD = bash \"$(ROOTPATH)/Engine/Build/BatchFiles/Linux/Build.sh\"\n";

			string FileName = "Makefile"; // MasterProjectName + ".mk";
			StringBuilder MakefileContent = new StringBuilder();
			MakefileContent.Append(
				"# Makefile generated by MakefileGenerator.cs\n" +
				"# *DO NOT EDIT*\n\n" +
				"ROOTPATH = " + BuildToolRootPath + "\n" +
				MakeGameProjectFile + "\n" +
				"TARGETS ="
			);
			String MakeProjectCmdArg = "";
			foreach (ProjectFile Project in GeneratedProjectFiles)
			{
				foreach (ProjectTarget TargetFile in Project.ProjectTargets)
				{
					if (TargetFile.TargetFilePath == null)
					{
						continue;
					}

					string TargetFileName = TargetFile.TargetFilePath.GetFileNameWithoutExtension();
					string Basename = TargetFileName.Substring(0, TargetFileName.LastIndexOf(".Target", StringComparison.InvariantCultureIgnoreCase));

					foreach (TargetConfiguration CurConfiguration in Enum.GetValues(typeof(TargetConfiguration)))
					{
						if (CurConfiguration != TargetConfiguration.Unknown && CurConfiguration != TargetConfiguration.Development)
						{
							if (InstalledPlatformInfo.IsValidConfiguration(CurConfiguration, EProjectType.Code))
							{
								string Confname = Enum.GetName(typeof(TargetConfiguration), CurConfiguration);
								MakefileContent.Append(String.Format(" \\\n\t{0}-Linux-{1} ", Basename, Confname));
							}
						}
					}
					MakefileContent.Append(" \\\n\t" + Basename);
				}
			}
			MakefileContent.Append("\\\n\tconfigure");

			MakefileContent.Append("\n\n" + BuildCommand + ProjectBuildCommand + "\n" +
				"all: StandardSet\n\n" +
				"RequiredTools: CrashReportClient-Linux-Shipping CrashReportClientEditor-Linux-Shipping ShaderCompileWorker Lightmass\n\n" +
				"StandardSet: RequiredTools Frontend Editor Insights\n\n" +
				"DebugSet: RequiredTools Frontend-Linux-Debug Editor-Linux-Debug\n\n"
			);

			foreach (ProjectFile Project in GeneratedProjectFiles)
			{
				foreach (ProjectTarget TargetFile in Project.ProjectTargets)
				{
					if (TargetFile.TargetFilePath == null)
					{
						continue;
					}

					string TargetFileName = TargetFile.TargetFilePath.GetFileNameWithoutExtension();
					string Basename = TargetFileName.Substring(0, TargetFileName.LastIndexOf(".Target", StringComparison.InvariantCultureIgnoreCase));

					string MakeBuildCommand;
					if (Basename == GameProjectName || Basename == (GameProjectName + "Editor"))
					{
						MakeProjectCmdArg = " -project=\"$(GAMEPROJECTFILE)\"";
						MakeBuildCommand = "$(PROJECTBUILD)";
					}
					else
					{
						MakeBuildCommand = "$(BUILD)";
					}

					foreach (TargetConfiguration CurConfiguration in Enum.GetValues(typeof(TargetConfiguration)))
					{
						if (Basename == GameProjectName || Basename == (GameProjectName + "Editor"))
						{
							MakeProjectCmdArg = " -project=\"$(GAMEPROJECTFILE)\"";
							MakeBuildCommand = "$(PROJECTBUILD)";
						}
						else
						{
							MakeBuildCommand = "$(BUILD)";
						}

						if (CurConfiguration != TargetConfiguration.Unknown && CurConfiguration != TargetConfiguration.Development)
						{
							if (InstalledPlatformInfo.IsValidConfiguration(CurConfiguration, EProjectType.Code))
							{
								string Confname = Enum.GetName(typeof(TargetConfiguration), CurConfiguration);
								MakefileContent.Append(String.Format("\n{1}-Linux-{2}:\n\t {0} {1} Linux {2} {3} $(ARGS)\n", MakeBuildCommand, Basename, Confname, MakeProjectCmdArg));
							}
						}
					}
					MakefileContent.Append(String.Format("\n{1}:\n\t {0} {1} Linux Development {2} $(ARGS)\n", MakeBuildCommand, Basename, MakeProjectCmdArg));
				}
			}

			MakefileContent.Append("\nconfigure:\n");
			if (!String.IsNullOrEmpty(GameProjectName))
			{
				// Make sure UBT is updated.
				MakefileContent.Append("\txbuild /property:Configuration=Development /verbosity:quiet /nologo ");
				MakefileContent.Append("\"$(ROOTPATH)/Engine/Source/Programs/BuildTool/BuildTool.csproj\"\n");
				MakefileContent.Append("\t$(PROJECTBUILD) -projectfiles -project=\"\\\"$(GAMEPROJECTFILE)\\\"\" -game -engine \n");
			}
			else
			{
				MakefileContent.Append("\tbash \"$(ROOTPATH)/GenerateProjectFiles.sh\" \n");
			}

			MakefileContent.Append("\n.PHONY: $(TARGETS)\n");
			FileReference FullFileName = FileReference.Combine(MasterProjectPath, FileName);
			return WriteFileIfChanged(FullFileName.FullName, MakefileContent.ToString());
		}

		// ProjectFileGenerator interface
		// protected override bool WriteMasterProjectFile( ProjectFile UBTProject )
		protected override bool WriteProjectFiles(PlatformProjectGeneratorCollection PlatformProjectGenerators)
		{
			return WriteMakefile();
		}

		public override MasterProjectFolder AllocateMasterProjectFolder(ProjectFileGenerator InitOwnerProjectFileGenerator, string InitFolderName)
		{
			return new MakefileFolder(InitOwnerProjectFileGenerator, InitFolderName);
		}

		protected override ProjectFile AllocateProjectFile(FileReference InitFilePath)
		{
			return new MakefileProjectFile(InitFilePath);
		}
	}
}
